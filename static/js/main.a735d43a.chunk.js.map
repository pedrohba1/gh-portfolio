{"version":3,"sources":["assets/banner.mp4","pages/Home/styles.js","pages/Home/index.js","pages/Projects/index.js","routes.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Container","styled","div","VideoContainer","Overlay","Video","video","Card","Home","useRef","cardRef","useEffect","gsap","from","x","ease","ref","el","loop","autoPlay","muted","src","banner","type","kind","srcLang","label","Projects","Routes","exact","path","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sGAAAA,EAAOC,QAAU,IAA0B,oC,wtCCEpC,IAAMC,EAAYC,IAAOC,IAAV,KAQTC,EAAiBF,IAAOC,IAAV,KAMdE,EAAUH,IAAOC,IAAV,KAaPG,EAAQJ,IAAOK,MAAV,KAKLC,EAAON,IAAOC,IAAV,K,iBCcFM,MAvCf,WACmBC,iBAAO,MAAtB,IAEIC,EAAUD,iBAAO,MAMrB,OAJAE,qBAAU,WACNC,IAAKC,KAAKH,EAAS,EAAG,CAAEI,EAAG,IAAKC,KAAM,cAItC,kBAACf,EAAD,KACI,kBAACG,EAAD,CACIa,IAAK,SAACC,GACSA,IAGf,kBAACZ,EAAD,CAAOa,MAAI,EAACC,UAAQ,EAACC,OAAK,GACtB,4BAAQC,IAAKC,IAAQC,KAAK,cAC1B,2BAAOC,KAAK,YAAYC,QAAQ,KAAKC,MAAM,YAF/C,gDAMA,kBAACtB,EAAD,KACI,kBAACG,EAAD,CACIS,IAAK,SAACC,GACFP,EAAUO,IAGd,iEACA,qFC9BTU,MAJf,WACI,OAAO,+BCCI,SAASC,IACpB,OACI,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,iBACd,kBAAC,EAAD,OAEJ,kBAAC,IAAD,CAAOA,KAAK,0BACR,kBAAC,EAAD,SCLLC,MAJf,WACI,OAAO,kBAACH,EAAD,OCMSI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACL,kBAAC,IAAMC,WAAP,KACI,kBAAC,EAAD,OAEJC,SAASC,eAAe,SDyHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.a735d43a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/banner.840cce88.mp4\";","import styled from \"styled-components\";\n\nexport const Container = styled.div`\n    z-index: 1;\n\n    width: 100%;\n    height: 100%;\n    text-align: center;\n`;\n\nexport const VideoContainer = styled.div`\n    position: fixed;\n    min-width: 100%;\n    min-height: 100%;\n`;\n\nexport const Overlay = styled.div`\n    display: flex;\n    position: fixed;\n    bottom: 0;\n    background: rgba(0, 0, 0, 0.5);\n    color: #f1f1f1;\n    width: 100%;\n    height: 100%;\n    align-content: center;\n    justify-content: center;\n    resize: initial;\n`;\n\nexport const Video = styled.video`\n    object-fit: cover;\n    resize: horizontal;\n`;\n\nexport const Card = styled.div`\n    display: flex;\n    flex-direction: column;\n    width: 800px;\n    height: 300px;\n    align-self: center;\n    border-radius: 5px;\n    text-align: center;\n    justify-content: center;\n    align-items: center;\n\n    border: 2px solid #fff;\n`;\n","import React, { useEffect, useRef } from \"react\";\n\nimport gsap from \"gsap\";\nimport ScrollTrigger from \"gsap/ScrollTrigger\";\n\nimport { VideoContainer, Container, Video, Overlay, Card } from \"./styles\";\n\nimport banner from \"~/assets/banner.mp4\";\n\nfunction Home() {\n    let videoRef = useRef(null);\n\n    let cardRef = useRef(null);\n\n    useEffect(() => {\n        gsap.from(cardRef, 5, { x: 700, ease: \"power3\" });\n    });\n\n    return (\n        <Container>\n            <VideoContainer\n                ref={(el) => {\n                    videoRef = el;\n                }}\n            >\n                <Video loop autoPlay muted>\n                    <source src={banner} type=\"video/mp4\" />\n                    <track kind=\"subtitles\" srcLang=\"en\" label=\"English\" />\n                    Your browser does not support the video tag.\n                </Video>\n\n                <Overlay>\n                    <Card\n                        ref={(el) => {\n                            cardRef = el;\n                        }}\n                    >\n                        <h1> Welcome to my personal portfolio</h1>\n                        <h3>\n                            These are all my projects done until recent day.\n                        </h3>\n                    </Card>\n                </Overlay>\n            </VideoContainer>\n        </Container>\n    );\n}\n\nexport default Home;\n","import React from \"react\";\n\n// import { Container } from './styles';\n\nfunction Projects() {\n    return <div />;\n}\n\nexport default Projects;\n","import React from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nimport Home from \"~/pages/Home\";\nimport Projects from \"~/pages/Projects\";\n\nexport default function Routes() {\n    return (\n        <Router>\n            <Switch>\n                <Route exact path=\"/gh-portfolio\">\n                    <Home />\n                </Route>\n                <Route path=\"/gh-portfolio/projects\">\n                    <Projects />\n                </Route>\n            </Switch>\n        </Router>\n    );\n}\n","import React from \"react\";\nimport \"./App.css\";\n\nimport Routes from \"~/routes\";\n\nfunction App() {\n    return <Routes />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}